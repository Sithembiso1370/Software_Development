Database
Our database access class (registry/mysqldb.class.php) should provide us with a
basic level of abstraction when accessing the database; this also allows us to simplify
certain tasks such as inserting records into a database, performing updates, and if we
wanted to, even tasks such as creating and editing database tables.
The class needs to be able to:
    • Connect to at least one database
    • Manage connections to multiple databases where more than one have been
    connected to
    • Execute queries
    • Return result sets from executed queries
    • Return information from executed queries, such as the ID of the record that
    was last inserted into the database
    • Cache the results of queries (the main use of this is to integrate a result set
    with the view; this would be done by caching the results, and associating it
    with a section in the templates)
    Many of the functions of this class will be simple wrappers for existing MySQL
    database functions, with some additions, and allow us to include more error
    handling should we wish

Connecting to the database and managing connections
    In order to connect to multiple databases, we need to maintain a record of the
    different connections. This can be done by storing each connection resource in
    an array, keeping a record as to which of the items in this array is the active
    connection. When a query is executed, it will perform the query against the
    currently active connection.

To connect to the database, we pass the database server host, username, and
password and of course the name of the database we wish to connect to. The
resulting connection is stored in our connections array, and the connection ID
(Array key) is returned.

When we need to swap between connections, for example, to look up data from
an external source, or authenticate against another system, we need to tell the
database object to use this different connection. This is achieved through the
setActiveConnection method.


Executing queries
After a query is executed, we may wish to get the rows from the result of the query;
to allow us to do this, we simply store the result of the query in the classes $last
variable, so that it can be accessed by other methods.

Simplifying common queries
    Common queries such as INSERT, UPDATE, and DELETE are often very repetitive;
    however, they are quite easy to abstract the basics of into our database management
    class. This won't work for all situations, but should make our lives easier for the
    bulk of these operations. We can abstract select queries to this class too. However,
    these are much more complicated, particularly, as we will more often than not, need
    to utilize more complicated logic, such as sub-queries, joins, and aliases. This more
    complicated logic would need to be developed into the code.

Deleting records 
    can be done simply using the table name, conditions, and a limit. In
    some cases, a limit may not be required, so if a non-empty string is passed, we need
    to add the LIMIT keyword to the query.

Updating and inserting records 
    are tasks I find to be the most cumbersome; however,
    we can easily abstract these simply by passing the table name, an array of field
    names and field value pairs, and in the case of update operations, a condition.

Sanitizing data
    Depending on the exact PHP setup, data needs to be sanitized slightly differently,
    to prevent characters being escaped too many times. This is often the result of
    magic_quotes_gpc setting. To make things easier, and to provide a single place
    for changes to be made depending on our server's configuration, we can centralize
    our data sanitization.

Wrapping other MySQLi functions
    This leaves us with a few other common MySQLi functions to wrap into our class,
    including fetching the data from the executed query, fetching the number of rows
    returned by a query, and getting the number of rows affected by a query.

Disconnecting
    When the database object is no longer required, we should disconnect from all of the
    connections we have made to various databases. This can be done through a simple
    foreach loop in the deconstructor.