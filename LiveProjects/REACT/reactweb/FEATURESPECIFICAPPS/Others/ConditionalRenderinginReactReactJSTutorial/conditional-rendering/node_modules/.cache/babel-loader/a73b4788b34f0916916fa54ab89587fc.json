{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\LiveProjects\\\\REACT\\\\reactweb\\\\FEATURESPECIFICAPPS\\\\Others\\\\ConditionalRenderinginReactReactJSTutorial\\\\conditional-rendering\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport logo from './logo.svg';\nimport './App.css'; // Import the State Module to gain access to statefull functions\n\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App(props) {\n  _s();\n\n  // Declaire a boolean variable to hold the state and the function to manipulate the state\n  const [isToggled, setIsToggled] = useState(false); // Because now i want to make a decision in a structure manner within a function\n  // I cannot call a function within a function but i can create a variable that holds a callback\n  //that callback just changes the state for rendering withing this same component\n\n  const toggleState = () => {\n    // If the toggle state is true\n    if (isToggled) {\n      // set it to falls \n      setIsToggled(false);\n      console.log('state changed to false');\n    } else {\n      setIsToggled(true);\n      console.log('state changed to true');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleState,\n      title: isToggled,\n      children: \"click to Toggle state\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: isToggled ? \"Toggle On\" : \"Toggle Off\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"BfAUiqoWRJivSt7ElaSfVLryCwQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","useState","App","props","isToggled","setIsToggled","toggleState","console","log"],"sources":["C:/xampp/htdocs/LiveProjects/REACT/reactweb/FEATURESPECIFICAPPS/Others/ConditionalRenderinginReactReactJSTutorial/conditional-rendering/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport './App.css';\n// Import the State Module to gain access to statefull functions\nimport { useState } from 'react';\n\nfunction App(props) {\n  // Declaire a boolean variable to hold the state and the function to manipulate the state\n  const [isToggled, setIsToggled] = useState(false);\n\n  // Because now i want to make a decision in a structure manner within a function\n  // I cannot call a function within a function but i can create a variable that holds a callback\n  //that callback just changes the state for rendering withing this same component\n  const toggleState = () =>{\n    // If the toggle state is true\n    if (isToggled) {\n      // set it to falls \n      setIsToggled(false);\n      console.log('state changed to false');\n    }\n    else{\n      setIsToggled(true);\n      console.log('state changed to true');\n    }\n  }\n\n  \n\n  return (\n    <div className=\"App\">\n      <button onClick={toggleState} title={isToggled} >\n          click to Toggle state\n      </button>\n      <h1>\n      {isToggled ? \"Toggle On\" : \"Toggle Off\"}\n      </h1>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,YAAjB;AACA,OAAO,WAAP,C,CACA;;AACA,SAASC,QAAT,QAAyB,OAAzB;;;AAEA,SAASC,GAAT,CAAaC,KAAb,EAAoB;EAAA;;EAClB;EACA,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,CAAC,KAAD,CAA1C,CAFkB,CAIlB;EACA;EACA;;EACA,MAAMK,WAAW,GAAG,MAAK;IACvB;IACA,IAAIF,SAAJ,EAAe;MACb;MACAC,YAAY,CAAC,KAAD,CAAZ;MACAE,OAAO,CAACC,GAAR,CAAY,wBAAZ;IACD,CAJD,MAKI;MACFH,YAAY,CAAC,IAAD,CAAZ;MACAE,OAAO,CAACC,GAAR,CAAY,uBAAZ;IACD;EACF,CAXD;;EAeA,oBACE;IAAK,SAAS,EAAC,KAAf;IAAA,wBACE;MAAQ,OAAO,EAAEF,WAAjB;MAA8B,KAAK,EAAEF,SAArC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAIE;MAAA,UACCA,SAAS,GAAG,WAAH,GAAiB;IAD3B;MAAA;MAAA;MAAA;IAAA,QAJF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAUD;;GAhCQF,G;;KAAAA,G;AAkCT,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}