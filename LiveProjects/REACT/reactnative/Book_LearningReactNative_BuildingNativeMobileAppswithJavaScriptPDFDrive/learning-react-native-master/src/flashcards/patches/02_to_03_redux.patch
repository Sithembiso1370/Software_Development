diff --git a/src_checkpoint_03/actions/creators.js b/src_checkpoint_03/actions/creators.js
new file mode 100644
index 0000000..e26a167
--- /dev/null
+++ b/src_checkpoint_03/actions/creators.js
@@ -0,0 +1,30 @@
+import {
+  ADD_DECK,
+  ADD_CARD,
+  REVIEW_DECK,
+  STOP_REVIEW,
+  NEXT_REVIEW
+} from "./types";
+
+import Card from "../data/Card";
+import Deck from "../data/Deck";
+
+export const addDeck = name => {
+  return { type: ADD_DECK, data: new Deck(name) };
+};
+
+export const addCard = (front, back, deckID) => {
+  return { type: ADD_CARD, data: new Card(front, back, deckID) };
+};
+
+export const reviewDeck = deckID => {
+  return { type: REVIEW_DECK, data: { deckID: deckID } };
+};
+
+export const stopReview = () => {
+  return { type: STOP_REVIEW, data: {} };
+};
+
+export const nextReview = () => {
+  return { type: NEXT_REVIEW, data: {} };
+};
diff --git a/src_checkpoint_03/actions/types.js b/src_checkpoint_03/actions/types.js
new file mode 100644
index 0000000..215d05b
--- /dev/null
+++ b/src_checkpoint_03/actions/types.js
@@ -0,0 +1,5 @@
+export const ADD_DECK = "ADD_DECK";
+export const ADD_CARD = "ADD_CARD";
+export const REVIEW_DECK = "REVIEW_DECK";
+export const STOP_REVIEW = "STOP_REVIEW";
+export const NEXT_REVIEW = "NEXT_REVIEW";
diff --git a/src_checkpoint_02/components/.DS_Store b/src_checkpoint_02/components/.DS_Store
deleted file mode 100644
index 7d86a7f..0000000
Binary files a/src_checkpoint_02/components/.DS_Store and /dev/null differ
diff --git a/src_checkpoint_02/components/DeckScreen/index.js b/src_checkpoint_03/components/DeckScreen/index.js
index 4b8a59a..3ceca1b 100644
--- a/src_checkpoint_02/components/DeckScreen/index.js
+++ b/src_checkpoint_03/components/DeckScreen/index.js
@@ -1,7 +1,10 @@
 import React, { Component } from "react";
 import { View } from "react-native";
 
+import { connect } from "react-redux";
+
 import { MockDecks } from "./../../data/Mocks";
+import { addDeck, reviewDeck } from "./../../actions/creators";
 import Deck from "./Deck";
 import DeckCreation from "./DeckCreation";
 
@@ -10,39 +13,40 @@ class DecksScreen extends Component {
 
   static navigationOptions = { title: "All Decks" };
 
-  constructor(props) {
-    super(props);
-    this.state = { decks: MockDecks };
-  }
-
-  _createDeck = () => {
-    console.warn("Data saving not implemented");
-    this.props.navigation.navigate("CardCreation");
+  _createDeck = name => {
+    let createDeckAction = addDeck(name);
+    this.props.createDeck(createDeckAction);
+    this.props.navigation.navigate("CardCreation", {
+      deckID: createDeckAction.data.id
+    });
   };
 
-  _addCards = () => {
-    console.warn("Data saving not implemented");
-    this.props.navigation.navigate("CardCreation");
+  _addCards = deckID => {
+    this.props.navigation.navigate("CardCreation", { deckID: deckID });
   };
 
-  _review = () => {
-    console.warn("Actual reviews not implemented");
+  _review = deckID => {
+    this.props.reviewDeck(deckID);
     this.props.navigation.navigate("Review");
   };
 
   _mkDeckViews() {
-    if (!this.state.decks) {
+    if (!this.props.decks) {
       return null;
     }
 
-    return this.state.decks.map(deck => {
+    return this.props.decks.map(deck => {
       return (
         <Deck
           deck={deck}
-          count={deck.cards.length}
+          count={this.props.counts[deck.id]}
           key={deck.id}
-          add={this._addCards}
-          review={this._review}
+          add={() => {
+            this._addCards(deck.id);
+          }}
+          review={() => {
+            this._review(deck.id);
+          }}
         />
       );
     });
@@ -58,4 +62,28 @@ class DecksScreen extends Component {
   }
 }
 
-export default DecksScreen;
+const mapDispatchToProps = dispatch => {
+  return {
+    createDeck: deckAction => {
+      dispatch(deckAction);
+    },
+    reviewDeck: deckID => {
+      dispatch(reviewDeck(deckID));
+    }
+  };
+};
+
+const mapStateToProps = state => {
+  return {
+    decks: state.decks,
+    counts: state.decks.reduce(
+      (sum, deck) => {
+        sum[deck.id] = deck.cards.length;
+        return sum;
+      },
+      {}
+    )
+  };
+};
+
+export default connect(mapStateToProps, mapDispatchToProps)(DecksScreen);
diff --git a/src_checkpoint_02/components/Flashcards.js b/src_checkpoint_03/components/Flashcards.js
index 8907527..4a87233 100644
--- a/src_checkpoint_02/components/Flashcards.js
+++ b/src_checkpoint_03/components/Flashcards.js
@@ -1,21 +1,41 @@
 import React, { Component } from "react";
 import { StyleSheet, View } from "react-native";
 import { StackNavigator } from "react-navigation";
+import { createStore } from "redux";
+import { Provider } from "react-redux";
+
+import { reducer } from "../reducers/index";
 
 import Logo from "./Header/Logo";
 import DeckScreen from "./DeckScreen";
 import NewCardScreen from "./NewCardScreen";
 import ReviewScreen from "./ReviewScreen";
 
+let store = createStore(reducer);
+
 let headerOptions = {
   headerStyle: { backgroundColor: "#FFFFFF" },
   headerLeft: <Logo />
 };
 
-let navigator = StackNavigator({
+const Navigator = StackNavigator({
   Home: { screen: DeckScreen, navigationOptions: headerOptions },
   Review: { screen: ReviewScreen, navigationOptions: headerOptions },
-  CardCreation: { screen: NewCardScreen, navigationOptions: headerOptions }
+  CardCreation: {
+    screen: NewCardScreen,
+    path: "createCard/:deckID",
+    navigationOptions: headerOptions
+  }
 });
 
-export default navigator;
+class App extends Component {
+  render() {
+    return (
+      <Provider store={store}>
+        <Navigator />
+      </Provider>
+    );
+  }
+}
+
+export default App;
diff --git a/src_checkpoint_02/components/NewCardScreen/index.js b/src_checkpoint_03/components/NewCardScreen/index.js
index 2545512..6d64405 100644
--- a/src_checkpoint_02/components/NewCardScreen/index.js
+++ b/src_checkpoint_03/components/NewCardScreen/index.js
@@ -2,6 +2,8 @@ import React, { Component } from "react";
 import { StyleSheet, View } from "react-native";
 
 import DeckModel from "./../../data/Deck";
+import { addCard } from "./../../actions/creators";
+import { connect } from "react-redux";
 
 import Button from "../Button";
 import LabeledInput from "../LabeledInput";
@@ -18,6 +20,10 @@ class NewCard extends Component {
     this.state = this.initialState;
   }
 
+  _deckID = () => {
+    return this.props.navigation.state.params.deckID;
+  };
+
   _handleFront = text => {
     this.setState({ front: text });
   };
@@ -27,8 +33,8 @@ class NewCard extends Component {
   };
 
   _createCard = () => {
-    console.warn("Data saving not implemented");
-    this.props.navigation.navigate("CardCreation");
+    this.props.createCard(this.state.front, this.state.back, this._deckID());
+    this.props.navigation.navigate("CardCreation", { deckID: this._deckID() });
   };
 
   _reviewDeck = () => {
@@ -79,4 +85,16 @@ const styles = StyleSheet.create({
   buttonRow: { flexDirection: "row" }
 });
 
-export default NewCard;
+const mapStateToProps = state => {
+  return { decks: state.decks };
+};
+
+const mapDispatchToProps = dispatch => {
+  return {
+    createCard: (front, back, deckID) => {
+      dispatch(addCard(front, back, deckID));
+    }
+  };
+};
+
+export default connect(mapStateToProps, mapDispatchToProps)(NewCard);
diff --git a/src_checkpoint_02/components/ReviewScreen/index.js b/src_checkpoint_03/components/ReviewScreen/index.js
index 645c6d0..7df1669 100644
--- a/src_checkpoint_02/components/ReviewScreen/index.js
+++ b/src_checkpoint_03/components/ReviewScreen/index.js
@@ -1,10 +1,11 @@
 import React, { Component } from "react";
 import { StyleSheet, View } from "react-native";
 
+import { connect } from "react-redux";
 import ViewCard from "./ViewCard";
-import { MockReviews } from "./../../data/Mocks";
 import { mkReviewSummary } from "./ReviewSummary";
 import colors from "./../../styles/colors";
+import { reviewCard, nextReview, stopReview } from "./../../actions/creators";
 
 class ReviewScreen extends Component {
   static displayName = "ReviewScreen";
@@ -13,12 +14,7 @@ class ReviewScreen extends Component {
 
   constructor(props) {
     super(props);
-    this.state = {
-      numReviewed: 0,
-      numCorrect: 0,
-      currentReview: 0,
-      reviews: MockReviews
-    };
+    this.state = { numReviewed: 0, numCorrect: 0 };
   }
 
   onReview = correct => {
@@ -29,27 +25,26 @@ class ReviewScreen extends Component {
   };
 
   _nextReview = () => {
-    console.warn("Showing next review, but data saving not implemented.");
-    this.setState({ currentReview: this.state.currentReview + 1 });
+    this.props.nextReview();
   };
 
   _quitReviewing = () => {
-    console.warn("Data saving not implemented");
+    this.props.stopReview();
     this.props.navigation.goBack();
   };
 
   _contents() {
-    if (!this.state.reviews || this.state.reviews.length === 0) {
+    if (!this.props.reviews || this.props.reviews.length === 0) {
       return null;
     }
 
-    if (this.state.currentReview < this.state.reviews.length) {
+    if (this.props.currentReview < this.props.reviews.length) {
       return (
         <ViewCard
           onReview={this.onReview}
           continue={this._nextReview}
           quit={this._quitReviewing}
-          {...this.state.reviews[this.state.currentReview]}
+          {...this.props.reviews[this.props.currentReview]}
         />
       );
     } else {
@@ -71,4 +66,22 @@ const styles = StyleSheet.create({
   container: { backgroundColor: colors.blue, flex: 1, paddingTop: 24 }
 });
 
-export default ReviewScreen;
+const mapDispatchToProps = dispatch => {
+  return {
+    nextReview: () => {
+      dispatch(nextReview());
+    },
+    stopReview: () => {
+      dispatch(stopReview());
+    }
+  };
+};
+
+const mapStateToProps = state => {
+  return {
+    reviews: state.currentReview.questions,
+    currentReview: state.currentReview.currentQuestionIndex
+  };
+};
+
+export default connect(mapStateToProps, mapDispatchToProps)(ReviewScreen);
diff --git a/src_checkpoint_03/reducers/decks.js b/src_checkpoint_03/reducers/decks.js
new file mode 100644
index 0000000..1202a28
--- /dev/null
+++ b/src_checkpoint_03/reducers/decks.js
@@ -0,0 +1,26 @@
+import { ADD_DECK, ADD_CARD } from "../actions/types";
+
+function decksWithNewCard(oldDecks, card) {
+  return oldDecks.map(deck => {
+    if (deck.id === card.deckID) {
+      deck.addCard(card);
+      return deck;
+    } else {
+      return deck;
+    }
+  });
+}
+
+const reducer = (state = [], action) => {
+  console.warn("Changes are not persisted to disk");
+
+  switch (action.type) {
+    case ADD_DECK:
+      return state.concat(action.data);
+    case ADD_CARD:
+      return decksWithNewCard(state, action.data);
+  }
+  return state;
+};
+
+export default reducer;
diff --git a/src_checkpoint_03/reducers/index.js b/src_checkpoint_03/reducers/index.js
new file mode 100644
index 0000000..4d271a0
--- /dev/null
+++ b/src_checkpoint_03/reducers/index.js
@@ -0,0 +1,17 @@
+import { MockDecks, MockCards } from "./../data/Mocks";
+
+import DecksReducer from "./decks";
+import ReviewReducer, { mkReviewState } from "./reviews";
+
+const initialState = () => {
+  return { decks: MockDecks, currentReview: mkReviewState() };
+};
+
+export const reducer = (state = initialState(), action) => {
+  let decks = DecksReducer(state.decks, action);
+
+  return {
+    decks: decks,
+    currentReview: ReviewReducer(state.currentReview, action, decks)
+  };
+};
diff --git a/src_checkpoint_03/reducers/reviews.js b/src_checkpoint_03/reducers/reviews.js
new file mode 100644
index 0000000..93aae7e
--- /dev/null
+++ b/src_checkpoint_03/reducers/reviews.js
@@ -0,0 +1,42 @@
+import { mkReviews } from "./../data/QuizCardView";
+import { REVIEW_DECK, NEXT_REVIEW, STOP_REVIEW } from "./../actions/types";
+
+export const mkReviewState = (
+  deckID = null,
+  questions = [],
+  currentQuestionIndex = 0
+) => {
+  return { deckID, questions, currentQuestionIndex };
+};
+
+function findDeck(decks, id) {
+  return decks.find(d => {
+    return d.id === id;
+  });
+}
+
+function generateReviews(deck) {
+  return mkReviewState(deck.id, mkReviews(deck.cards), 0);
+}
+
+function nextReview(state) {
+  return mkReviewState(
+    state.deckID,
+    state.questions,
+    state.currentQuestionIndex + 1
+  );
+}
+
+const reducer = (state = mkReviewstate(), action, decks) => {
+  switch (action.type) {
+    case REVIEW_DECK:
+      return generateReviews(findDeck(decks, action.data.deckID));
+    case NEXT_REVIEW:
+      return nextReview(state);
+    case STOP_REVIEW:
+      return mkReviewState();
+  }
+  return state;
+};
+
+export default reducer;
